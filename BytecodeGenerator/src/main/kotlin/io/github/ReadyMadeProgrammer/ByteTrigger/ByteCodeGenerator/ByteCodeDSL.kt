package io.github.ReadyMadeProgrammer.ByteTrigger.ByteCodeGenerator

import org.objectweb.asm.Label
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes.*
import org.objectweb.asm.Type.*
import java.lang.reflect.Constructor
import kotlin.math.abs


data class Field(val owner: String, val name: String, val desc: String) {
    constructor(field: java.lang.reflect.Field) : this(getInternalName(field.declaringClass), field.name, getDescriptor(field.type))
}

data class Type(val internalName: String) {
    constructor(type: java.lang.Class<*>) : this(getDescriptor(type))
}

data class Method(val owner: String, val name: String, val desc: String, val isInterface: Boolean) {
    constructor(method: java.lang.reflect.Method) : this(getInternalName(method.declaringClass), method.name, getMethodDescriptor(method), method.declaringClass.isInterface)
    constructor(constructor: Constructor<*>) : this(getInternalName(constructor.declaringClass), "<init>", getConstructorDescriptor(constructor), constructor.declaringClass.isInterface)
}

fun MethodVisitor.visit(build: ByteCodeDSL.()->Unit){
    val builder = ByteCodeDSL(this)
    builder.build()
}

class ByteCodeDSL(private val visitor: MethodVisitor) {
    val aaload get() = visitor.visitInsn(AALOAD)
    val aastore get() = visitor.visitInsn(AASTORE)
    val aconst_null get() = visitor.visitInsn(ACONST_NULL)
    fun aload(index: Int) = visitor.visitInsn(ALOAD)
    fun anewarray(type: Type) = visitor.visitTypeInsn(ANEWARRAY, type.internalName)
    val areturn get() = visitor.visitInsn(ARETURN)
    val arraylength get() = visitor.visitInsn(ARRAYLENGTH)
    fun astore(index: Int) = visitor.visitVarInsn(ASTORE, index)
    val athrow get() = visitor.visitInsn(ATHROW)
    val baload get() = visitor.visitInsn(BALOAD)
    val bastore get() = visitor.visitInsn(BASTORE)
    fun bipush(operand: Int) = visitor.visitIntInsn(BIPUSH, operand)
    val caload get() = visitor.visitInsn(CALOAD)
    val castore get() = visitor.visitInsn(CASTORE)
    fun checkcast(type: Type) = visitor.visitTypeInsn(CHECKCAST, type.internalName)
    val d2f get() = visitor.visitInsn(D2F)
    val d2i get() = visitor.visitInsn(D2I)
    val d2l get() = visitor.visitInsn(D2L)
    val dadd get() = visitor.visitInsn(DADD)
    val daload get() = visitor.visitInsn(DALOAD)
    val dastore get() = visitor.visitInsn(DASTORE)
    val dcmpg get() = visitor.visitInsn(DCMPG)
    val dcmpl get() = visitor.visitInsn(DCMPL)
    val dconst_0 get() = visitor.visitInsn(DCONST_0)
    val dconst_1 get() = visitor.visitInsn(DCONST_1)
    val ddiv get() = visitor.visitInsn(DDIV)
    fun dload(index: Int) = visitor.visitVarInsn(DLOAD, index)
    val dmul get() = visitor.visitInsn(DMUL)
    val dneg get() = visitor.visitInsn(DNEG)
    val drem get() = visitor.visitInsn(DREM)
    val dreturn get() = visitor.visitInsn(DRETURN)
    fun dstore(index: Int) = visitor.visitVarInsn(DSTORE, index)
    val dsub get() = visitor.visitInsn(DSUB)
    val dup get() = visitor.visitInsn(DUP)
    val dup_x1 get() = visitor.visitInsn(DUP_X1)
    val dup_x2 get() = visitor.visitInsn(DUP_X2)
    val dup2 get() = visitor.visitInsn(DUP2)
    val dup2_x1 get() = visitor.visitInsn(DUP2_X1)
    val dup2_x2 get() = visitor.visitInsn(DUP2_X2)
    val f2d get() = visitor.visitInsn(F2D)
    val f2i get() = visitor.visitInsn(F2I)
    val f2l get() = visitor.visitInsn(F2L)
    val fadd get() = visitor.visitInsn(FADD)
    val faload get() = visitor.visitInsn(FALOAD)
    val fastore get() = visitor.visitInsn(FASTORE)
    val fcmpg get() = visitor.visitInsn(FCMPG)
    val fcmpl get() = visitor.visitInsn(FCMPL)
    val fconst_0 get() = visitor.visitInsn(FCONST_0)
    val fconst_1 get() = visitor.visitInsn(FCONST_1)
    val fconst_2 get() = visitor.visitInsn(FCONST_2)
    val fdiv get() = visitor.visitInsn(FDIV)
    fun fload(index: Int) = visitor.visitVarInsn(FLOAD, index)
    val fmul get() = visitor.visitInsn(FMUL)
    val fneg get() = visitor.visitInsn(FNEG)
    val frem get() = visitor.visitInsn(FREM)
    val freturn get() = visitor.visitInsn(FRETURN)
    fun fstore(index: Int) = visitor.visitVarInsn(FSTORE, index)
    val fsub get() = visitor.visitInsn(FSUB)
    fun getfield(field: Field) = visitor.visitFieldInsn(GETFIELD, field.owner, field.name, field.desc)
    fun getstatic(field: Field) = visitor.visitFieldInsn(GETSTATIC, field.owner, field.name, field.desc)
    fun goto(label: Label) = visitor.visitJumpInsn(GOTO, label)
    val i2b get() = visitor.visitInsn(I2B)
    val i2c get() = visitor.visitInsn(I2C)
    val i2d get() = visitor.visitInsn(I2D)
    val i2f get() = visitor.visitInsn(I2F)
    val i2l get() = visitor.visitInsn(I2L)
    val i2s get() = visitor.visitInsn(I2S)
    val iadd get() = visitor.visitInsn(IADD)
    val iaload get() = visitor.visitInsn(IALOAD)
    val iand get() = visitor.visitInsn(IAND)
    val iastore get() = visitor.visitInsn(IASTORE)
    val iconst_m1 get() = visitor.visitInsn(ICONST_M1)
    val iconst_0 get() = visitor.visitInsn(ICONST_0)
    val iconst_1 get() = visitor.visitInsn(ICONST_1)
    val iconst_2 get() = visitor.visitInsn(ICONST_2)
    val iconst_3 get() = visitor.visitInsn(ICONST_3)
    val iconst_4 get() = visitor.visitInsn(ICONST_4)
    val iconst_5 get() = visitor.visitInsn(ICONST_5)
    val idiv get() = visitor.visitInsn(IDIV)
    fun if_acmpeq(branch: Label) = visitor.visitJumpInsn(IF_ACMPEQ, branch)
    fun if_acmpne(branch: Label) = visitor.visitJumpInsn(IF_ACMPNE, branch)
    fun if_icmpeq(branch: Label) = visitor.visitJumpInsn(IF_ICMPEQ, branch)
    fun if_icmpne(branch: Label) = visitor.visitJumpInsn(IF_ICMPNE, branch)
    fun if_icmplt(branch: Label) = visitor.visitJumpInsn(IF_ICMPLT, branch)
    fun if_icmpge(branch: Label) = visitor.visitJumpInsn(IF_ICMPGE, branch)
    fun if_icmpgt(branch: Label) = visitor.visitJumpInsn(IF_ICMPGT, branch)
    fun if_icmple(branch: Label) = visitor.visitJumpInsn(IF_ICMPLE, branch)
    fun ifeq(branch: Label) = visitor.visitJumpInsn(IFEQ, branch)
    fun ifne(branch: Label) = visitor.visitJumpInsn(IFNE, branch)
    fun iflt(branch: Label) = visitor.visitJumpInsn(IFLT, branch)
    fun ifge(branch: Label) = visitor.visitJumpInsn(IFGE, branch)
    fun ifgt(branch: Label) = visitor.visitJumpInsn(IFGT, branch)
    fun ifle(branch: Label) = visitor.visitJumpInsn(IFLE, branch)
    fun ifnonnull(branch: Label) = visitor.visitJumpInsn(IFNONNULL, branch)
    fun ifnull(branch: Label) = visitor.visitJumpInsn(IFNULL, branch)
    fun iinc(index: Int, increment: Int) = visitor.visitIincInsn(index, increment)
    fun iload(index: Int) = visitor.visitVarInsn(ILOAD, index)
    val imul get() = visitor.visitInsn(IMUL)
    val ineg get() = visitor.visitInsn(INEG)
    fun instanceof(type: Type) = visitor.visitTypeInsn(INSTANCEOF, type.internalName)
    //fun invokedynamic() //TODO:Implement this
    fun invokeinterface(method: Method) = visitor.visitMethodInsn(INVOKEINTERFACE, method.owner, method.name, method.desc, method.isInterface)
    fun invokespecial(method: Method) = visitor.visitMethodInsn(INVOKESPECIAL, method.owner, method.name, method.desc, method.isInterface)
    fun invokestatic(method: Method) = visitor.visitMethodInsn(INVOKESTATIC, method.owner, method.name, method.desc, method.isInterface)
    fun invokevirtual(method: Method) = visitor.visitMethodInsn(INVOKEVIRTUAL, method.owner, method.name, method.desc, method.isInterface)
    val ior get() = visitor.visitInsn(IOR)
    val irem get() = visitor.visitInsn(IREM)
    val ireturn get() = visitor.visitInsn(IRETURN)
    val ishl get() = visitor.visitInsn(ISHL)
    val ishr get() = visitor.visitInsn(ISHR)
    fun istore(index: Int) = visitor.visitVarInsn(ISTORE, index)
    val isub get() = visitor.visitInsn(ISUB)
    val iushr get() = visitor.visitInsn(IUSHR)
    val ixor get() = visitor.visitInsn(IXOR)
    fun jsr(branch: Label) = visitor.visitJumpInsn(JSR, branch)
    val l2d get() = visitor.visitInsn(L2D)
    val l2f get() = visitor.visitInsn(L2F)
    val l2i get() = visitor.visitInsn(L2I)
    val ladd get() = visitor.visitInsn(LADD)
    val laload get() = visitor.visitInsn(LALOAD)
    val land get() = visitor.visitInsn(LAND)
    val lastore get() = visitor.visitInsn(LASTORE)
    val lcmp get() = visitor.visitInsn(LCMP)
    val lconst_0 get() = visitor.visitInsn(LCONST_0)
    val lconst_1 get() = visitor.visitInsn(LCONST_1)
    fun ldc(value: Any) = visitor.visitLdcInsn(value)
    val ldiv get() = visitor.visitInsn(LDIV)
    fun lload(index: Int) = visitor.visitVarInsn(LLOAD, index)
    val lmul get() = visitor.visitInsn(LMUL)
    val lneg get() = visitor.visitInsn(LNEG)
    fun lookupswitch(default: Label, handles: Array<Pair<Int, Label>>) = visitor.visitLookupSwitchInsn(default, handles.map { it.first }.toIntArray(), handles.map { it.second }.toTypedArray())
    val lor get() = visitor.visitInsn(LOR)
    val lrem get() = visitor.visitInsn(LREM)
    val lreturn get() = visitor.visitInsn(LRETURN)
    val lshl get() = visitor.visitInsn(LSHL)
    val lshr get() = visitor.visitInsn(LSHR)
    fun lstore(index: Int) = visitor.visitVarInsn(LSTORE, index)
    val lsub get() = visitor.visitInsn(LSUB)
    val lushr get() = visitor.visitInsn(LUSHR)
    val lxor get() = visitor.visitInsn(LXOR)
    val monitorenter get() = visitor.visitInsn(MONITORENTER)
    val monitorexit get() = visitor.visitInsn(MONITOREXIT)
    fun multianewarray(type: Type, dimensions: Int) = visitor.visitMultiANewArrayInsn(type.internalName, dimensions)
    fun new(type: Type) = visitor.visitTypeInsn(NEW, type.internalName)
    fun newarray(type: Int) = visitor.visitIntInsn(NEWARRAY, type)
    val nop get() = visitor.visitInsn(NOP)
    val pop get() = visitor.visitInsn(POP)
    val pop2 get() = visitor.visitInsn(POP2)
    fun putfield(field: Field) = visitor.visitFieldInsn(PUTFIELD, field.owner, field.name, field.desc)
    fun putstatic(field: Field) = visitor.visitFieldInsn(PUTSTATIC, field.owner, field.name, field.desc)
    fun ret(index: Int) = visitor.visitVarInsn(RET, index)
    val Return get() = visitor.visitInsn(RETURN)
    val saload get() = visitor.visitInsn(SALOAD)
    val sastore get() = visitor.visitInsn(SASTORE)
    fun sipush(value: Int) = visitor.visitIntInsn(SIPUSH, value)
    val swap get() = visitor.visitInsn(SWAP)
    fun tableswitch(range: IntRange, default: Label, handle: Array<Label>) = visitor.visitTableSwitchInsn(range.start, range.endInclusive, default, *handle)
    fun autoiload(value: Int) = when {
        value == -1 -> iconst_m1
        value == 0 -> iconst_0
        value == 1 -> iconst_1
        value == 2 -> iconst_2
        value == 3 -> iconst_3
        value == 4 -> iconst_4
        value == 5 -> iconst_5
        abs(value) <= Byte.MAX_VALUE -> bipush(value)
        abs(value) <= Short.MAX_VALUE -> sipush(value)
        else -> ldc(value)
    }

    fun autobload(value: Boolean) = when (value) {
        false -> iconst_0
        true -> iconst_1
    }
}